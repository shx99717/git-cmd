###############################################################
# create a new repository and connect to github
###############################################################
echo "# dummy" >> README.md  
git init  
git add README.md  
git commit -m "first commit"  
git remote add origin https://github.com/shx99717/dummy.git  
git push -u origin master  


###############################################################
# .gitignore file format
###############################################################
# add ignore file lists
# cotent of the file
# - Literal file names, e.g. dummy_file, .some_file  
# - Directories e.g. log/
# - Wildcard e.g. *.log
# - Negation e.g. all except example.log are ignored 
#	*.log
#	!example.log
# - Double Asterisk to match any number of directories
#	**/logs matches all files or directories named logs
#   **/logs/*.log matches all files ending with .log in a logs directory
# - Comment start with #
touch .gitignore  


###############################################################
# commonly used ones
###############################################################
git status
git add
git rm
git commit -m 'some message'
git push
git pull
git log
git log --oneline
git log <branch-1>..<branch-2> --oneline # show all commits between two branches
git fetch							# Using git fetch without any parameters like this will retrieve all branches from the remote repo,
git fetch <remote-repo>				# if you have multiple remote repos then you should specify which one to retrieve from
git diff <branch1> <branch2> e.g. git diff master feature_x
git show <branch/tag>			 e.g. git show master, git show 1.0.0.1
git switch <branch_name>
git remote show origin				# show all remote information for origin
git merge --abort                   # during back merge by git cmd, e.g. git merge <source_branch>, if conflicts occur or you do not want to continue the merge, you could do this to abort the operation

// to remove untracked files
git clean -n           # check what will be removed
git clean -d           # remove directories
git clean -f           # real delete

###############################################################
# find the difference
###############################################################

|1.Working tree|     |2.index/staging|        |3.local repo|       |4.remote repo|

// compare 1 <-> 2
// compare the <filename> in the working directory with the index/cached/staged(since it is not yet added to index/stage/cache, therefore 
// it is actually showing the changes that are not staged yet), or simply show the local changes
git diff <filename>

// compare 1 <-> 3
// compare the <filename> in the working directory with the HEAD(local repository)
// the HEAD is pointing to the tip of the local repository's last commit
git diff HEAD <filename>

// compare 2 <-> 3
// compare the <filename> in the index with the local repository
// show the diff between your staged/cached/indexed file and tip of the local repository which is HEAD pointing at
// --cached == --staged
git diff --cached <filename>

// compare 3 <-> 4
// e.g. compare local master with remote master
git diff master..origin/master
// or
git diff HEAD..origin/master

// show difference between two branches
git diff <branch-1>..<branch-2>
// show difference between two branches for a specific file
git diff <branch-1>..<branch-2> -- <file>

// show difference between two tags
git diff <tag-1>..<tag-2>
git diff <tag-1>..<tag-2>
git diff <tag-1>..<tag-2> -- <file>

// show difference between two commits
git diff <commit-old>..<commit-new>
// or 
git diff <commit-old> <commit-new> 
git diff <commit-old>..<commit-new> -- <file>

// compare the working copy with the specific commit
git diff 4ac0a6733


// compare to remote branch, e.g. compare the working copy to remote master
The second command above will compare against the locally stored remote tracking branch. The fetch command is required to update the remote tracking branch to be in sync with the contents of the remote server
git fetch origin master
git diff origin/master -- <file>

// compare two remote branch
git diff origin/<branch-1>..origin/<branch-2> -- <file>
// or
git diff origin/<branch-1> origin/<branch-2> -- <file>


###############################################################
# branches related
###############################################################
git branch  						# show local branches
git branch -a						# show all branches, including remote
git branch <branch_name> 			# create a branch using current code base, then switch to the newly created
                                    # branch, add, commit and push to remote, then switch back to the original 
                                    # branch, all changes are gone
git switch <branch_name>			# switch a branch
git push -u origin feature_x		# push the branch onto the remote and track it, -u = --set-upstream
git branch -u <remote-repo>/<branch_name>   # later let a local branch to track a remote branch
// to checkout a remote branch
git fetch							# first fetch all branches from default 'origin'
git checkout -t origin/dummy-branch	# git checkout -t <remote-repo>/<remote-branch>, the local branch will use the same name as remote branch
git checkout -t -b db origin/dummy-branch  # git checkout -t -b <local-branch> <remote-repo>/<remote-branch>, the local branch will use a different name

// delete branch locally
git branch -d localBranchName
// delete branch remotely
git push origin --delete remoteBranchName
or
git push origin :remoteBranchName

// if a remote branch does not appear in git branch -r
1. git config -e
2. add fetch = +refs/heads/*:refs/remotes/origin/*
3. git remote update
4. git branch -a/git branch -r

// after pull request and merge finished, if the git branch -r stil show the branch, use
git remote prune origin               # to clean up the stale remote branch
git fetch --all -p                    # or fetch and prune all remote origin
-- and also delete the local branch
git branch -d <branch_name>           # or -D to force delete
 
# merge related
git merge <branch_name>							# merge the code from <branch_name> into current branch
git merge <branch_name> --no-commit --no-ff 	# git merge without auto commit, this give a chance to further tweak the merge result before committing.


// restore a delete branch e.g. PR deleted branch
git reflog to find the tip revision sha
git checkout <sha>
git checkout -b <branch_name>
git push -u origin <branch_name>

###############################################################
# tag related
###############################################################
git tag                             			# show all tags
git fetch --tags								# fetch all remote tags
git tag 1.0.0.1									# mark the current status into a tag 1.0.0.1
git tag codebase_at_some_time_point 			# tags can be any name
git tag -a 1.0.0.2 -m 'release for 1.0.0,2'		# annotated tagging
git push origin 1.0.0.1 1.0.0.2					# push the tags to remote
git push --tags									# push all tags to remote
git push origin --delete remoteTagName          # delete tag remotely
git checkout tags/1.0.0.1 -b 1.0.x.x            # tag can not be switched/checkout
												# we can create a branch from an existing tag
												# e.g. 1.0.x.x patch branch for 1.0.0.1 released version
git checkout "tags/'5.3.2.1'" -b release/2020-02-5.3.x.x		# in case of special characters there
git push -u origin release/2020-02-5.3.x.x		# push the branch onto the remote and track it, -u = --set-upstream
git tag <tag_name> <reference of commit>        # create a tag from some past commit
												# e.g. git tag v1.2 5fcdb03


###############################################################
# stash related
###############################################################
git stash list									# shows all of the existing stashes
git stash										# add a stash with auto generated message
git stash push -m 'here is the description'		# add a stash with customized comment
git stash pop									# to apply the most recent stash on current working directory and drop the stash in one go
git stash pop stash@{1}							# to apply a specific stash, and drop
git stash apply									# to apply the most recent stash on current working directory, but NO drop
git stash apply stash@{1}						# to apply a specific stash, but NO drop
git stash drop									# drop the most recent stash
git stash drop stash@{1}						# drop a specific stash
git stash show									# show the most recent stash changelist
git stash show -p								# show the most recent stash in diff mode
git stash show stash@{2}						# show a specific stash changelist
git stash show -p stash@{2}						# show a specific stash in diff mode
git stash show -p master						# show the most recent stash in diff mode compare to master


// WIP = Working In Progress
// the git stash is also a very good tools to do copy and paste a bunch of changes from one branch to other branch
// e.g. Branch-A and Branch-B, when Branch-A develops some changes, put it into stash, and switch to Branch-B, git stash apply it
// then the changes just like copy and paste from Branch-A to Branch-B, this workflow could be used in scenario like
// develop a patch for release branch, and later apply the change also on the master, then we could use git stash to achieve it easily

###############################################################												
# MISC syntax
###############################################################
HEAD~3      # suffix ~<n> to a revision parameter means the commit object that is the nth generation ancestor of the
            # named commit object.												
master~1    # etc

###############################################################
# restore changes
###############################################################												
# reverting changes, these three commands have entirely different purposes.
# - git revert
#	This command creates a new commit that undoes the changes from a previous commit. This command adds new history to the project (it doesn't modify existing history).
#   If a commit has been made somewhere in the project's history, and you later decide that the commit is wrong and should not have been done, then git revert is the tool for the job. It will undo the changes introduced by the bad commit, recording the "undo" in the history.
# - git checkout
#   This command checks-out content from the repository and puts it in your work tree. It can also have other effects, depending on how the command was invoked. For instance, it can also change which branch you are currently working on. This command doesn't make any changes to the history.
#   If you have modified a file in your working tree, but haven't committed the change, then you can use git checkout to checkout a fresh-from-repository copy of the file.
#   !!!WARNING!!! Git 2.23 (Q3 2019) will replace git checkout with two new commands becauase the git checkout serves too many purposes
#   > git switch 
#     used for branch switching
#   > git restore
#     used for restoring file
#   but git checkout will be still there for backward compatible
# - git reset
#   This command is a little more complicated. It actually does a couple of different things depending on how it is invoked. It modifies the index (the so-called "staging area"). Or it changes which commit a branch head is currently pointing at. This command may alter existing history (by changing the commit that a branch references).
#   If you have made a commit, but haven't shared it with anyone else and you decide you don't want it, then you can use git reset to rewrite the history so that it looks as though you never made that commit.
git checkout <file_name>						# discard the changes of the file in the working area
git checkout .									# discard all the changes of the files in the working area
git restore <file_name>							# (better) to discard changes in working area
git restore --staged <file_name>				# to unstage the file
git reset HEAD~3								# to remove recent 3 commits, also the history is modified
git revert 0cb12da   							# use revert if the changes has also been made on remote, otherwise the
												# usage of git reset will introduce a conflict
												# revert will introudce a new commit which reverting the changes
												# which is also much safer
												

###############################################################
# conflict resolution approach
###############################################################
# I want to merge back from source_branch into target_branch, but there are merge conflicts prevent from FF
# Step 1: check out the target branch and merge in the changes from the source branch, manually resolve the conflicts
git checkout target_branch
git pull origin source_branch # or get fetch origin source_branch and merge with FETCH_HEAD 

# Step 2: after the merge conflicts are resolved, stage the changes accordingly, commit the changes and push.
git commit
git push origin HEAD


###############################################################
cherry pick commit(s)
###############################################################
dd2e86 - 946992	- 9143a9 - a6fd86 - 5a6057 [master]
           \
            76cada - 62ecb3	- b886a0 [feature]
e.g. we want to apply 62ecb3 onto the master only            
git checkout master
git cherry-pick 62ecb3

e.g. we want to apply a range of commit from 76cada to 62ecb3
git cherry-pick init_revision..end_revision   # init_revision is not included, end_revision is included   
git cherry-pick init_revision^..end_revision  # init_revision is included, end_revision is included
   
git checkout master
git cherry-pick 76cada^..62ecb3
// In case you have a conflict, solve it and type
git cherry-pick --continue
//to continue the cherry-pick process.




###############################################################
# understanding of repo structure
###############################################################
A single git repository can track an arbitrary number of branches, 
but your working tree is associated with just one of them (the "current" 
or "checked out" branch), and HEAD points to that branch. HEAD is the commit at the tip of the current branch.

|1.Working tree|     |2.index/staging|        |3.local repo|       |4.remote repo|

# 1->2
git add 
# 2->3
git commit
# 3->4
git push
# 4->3
git fetch
# compare 1 and 2
git diff
# compare 1 and 3
git diff HEAD
git diff FETCH_HEAD 

--> FETCH_HEAD where rev100 and rev99 are fetched via git fetch
    rev100
    rev99
--> HEAD, after git merge (which follows after git fetch), the HEAD will move to where FETCH_HEAD is
	rev98
	rev97
	..
	..
 


###############################################################
# understanding the git configuration
###############################################################
(1. Systen Level) <-- (2. Global Level) <-- (3. Repository Level)
1. System level (applied to every user on the system and all their repositories)
2. Global level (values specific personally to you, the user)
3. Repository level (specific to that single repository)

git config --list					# shows all inherited values from: system, global and local
git config --list --show-origin     # also see where that setting is defined
git config --list --system
git config --list --global
git config --list --local
git config --edit                   # edit the configuration, by default --local
git config user.name				# read one particular configuration, may also specify options --system, --global, --local to read that value at a particular level.
git config some.param value			# setup one particular configuration, may also specify options --system, --global, --local to set that value at a particular level.




###############################################################
# setup the line ending
###############################################################
style 1: Checkout Windows-style, commit Unix-style (recommended)
Git will convert LF to CRLF when checking out text files. When committing text files, CRLF will be converted to LF. 
For cross-platform projects, this is the recommended setting on Windows 
git config --global core.autocrlf true

style 2: Checkout as-is, commit Unix-style
Git will not perform any conversion when checking out text files. When committing text files, CRLF will be converted to LF. 
For cross-platform projects this is the recommended setting on Unix 
git config --global core.autocrlf input

style 3: Checkout as-is, commit as-is
Git will not perform any conversions when checking out or committing text files. Choosing this option is not recommended for cross-platform projects 
git config --global core.autocrlf false

###############################################################
# setup git difftool and mergetool
###############################################################	
-- setup mergetool
1. install Sublime Merge
2. add the executable onto the Path
3. 
git config --global mergetool.smerge.cmd 'smerge mergetool "$BASE" "$LOCAL" "$REMOTE" -o "$MERGED"'
git config --global mergetool.smerge.trustExitCode true
git config --global merge.tool smerge
4. git mergetool # Use git mergetool to run one of several merge utilities to resolve merge conflicts. It is typically run after git merge.


-- setup difftool
1. install kdiff3
2. 
git config --global diff.tool kdiff3
git config --global difftool.trustExitCode false
git config --global difftool.prompt false
git config --global difftool.kdiff3.path "E:/Program Files/KDiff3/kdiff3.exe"
4. git difftool is a Git command that allows you to compare and edit files between revisions using common diff tools. git difftool is a frontend to git diff and accepts the same options and arguments.


###############################################################
# Git MISC knowledge
###############################################################

# trust self-signed url address
git config --global http.sslVerify false  

# let git credential manager to save your password, you need only to type once
# The Git Credential Manager for Windows (GCM) is a credential helper for Git. It securely stores your credentials in the Windows Credential Manager so you only need to enter them once for each remote repo you access. All future Git commands will reuse the existing credentials. 
git config --global credential.helper manager

# if the password is remembered, but afterwards the password changed, git pull will tell Authentication failed
1. Go to Windows Credential Manager
2. Once the app is open, click on the Windows Credentials tab.
3. Locate the credentials that you want to remove/update, they will start with "git:" and might begin with "ada:"
4. Click Edit or Remove as required and confirm.

# the command line to fetch and pull multiple repositories under a parent folder
find . -mindepth 1 -maxdepth 1 -type d -print -exec git -C {} fetch --all -p \; -exec git -C {} pull \; -exec echo '-----------------------------------------------------' \;
# put into an alias, e.g. ~/.bashrc, then check with alias command, $> alias
alias git-sync-all="find . -mindepth 1 -maxdepth 1 -type d -print -exec git -C {} fetch --all -p \; -exec git -C {} pull \; -exec echo '-----------------------------------------------------' \;"

# fetch and pull in one command
alias git-fetch-pull="git fetch --all -p; git pull"

# in case we have GFW issue that blocks us from connecting to github.com, issues could be:
  - fatal: unable to access 'https://github.com/xxx': OpenSSL SSL_read: SSL_ERROR_SYSCALL, errno 10054
  - OpenSSL SSL_read: Connection was reset, errno 10054
# we could use a proxy to access the github via, the below line will enable the proxy globally for git, and use socks5 protocol
git config --global http.proxy 'socks5://desets01.medavis.local:1080'
# it can be turned off by
git config --global --unset http.proxy